#include "helpers/helper_player.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_game.hps"
#include "custom/modules/ModuleInterfaces_Custom.hps"
#include "custom/components/ComponentInterfaces_Custom.hps"
#include "custom/player/PlayerTypes_Custom.hps"
#include "custom/helpers/helper_items.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "custom/helpers/helper_player_custom.hps"
#include "helpers/helper_effects.hps"

//-------------------------------------------------------

/////////////////////////////////////////
// PICKUP
/////////////////////////////////////////

//-------------------------------------------------------

void Pickup_SetCanBeHighlighted(const tString &in asEntity, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	if (cScript_RunGlobalFunc(asEntity, "cScrPropPickup", "_Global_SetCanBeHighlighted") == false)
	{
		Error("Could not find door with name '"+asEntity+"' for _Global_SetCanBeHighlighted");
	}
}

//-------------------------------------------------------

void Pickup_SetCanPickup(const tString&in asItem, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asItem, "cScrPropPickup", "_Global_SetCanBePickedUp");
}

//-------------------------------------------------------

bool Pickup_GetExcludeFromRandomization(const tString&in asItem)
{
	cScript_RunGlobalFunc(asItem, "cScrPropPickup", "_Global_GetExcludeFromRandomization");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

void Pickup_SetExcludeFromRandomization(const tString&in asItem, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asItem, "cScrPropPickup", "_Global_SetExcludeFromRandomization");
}

//-------------------------------------------------------

void Pickup_SetIsLockerItem(const tString&in asItem, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asItem, "cScrPropPickup", "_Global_SetIsLockerItem");
}

//-------------------------------------------------------

bool Pickup_GetIsLockerItem(const tString&in asItem)
{
	cScript_RunGlobalFunc(asItem, "cScrPropPickup", "_Global_GetIsLockerItem");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

/////////////////////////////////////////
// READABLE
/////////////////////////////////////////

//-------------------------------------------------------

void Readable_SetCanPickup(const tString&in asItem, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asItem, "cScrPropReadable", "_Global_SetCanBePickedUp");
}

//-------------------------------------------------------

void Readable_SetIsLockerItem(const tString&in asItem, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asItem, "cScrPropReadable", "_Global_SetIsLockerItem");
}

//-------------------------------------------------------

bool Readable_GetIsLockerItem(const tString&in asItem)
{
	cScript_RunGlobalFunc(asItem, "cScrPropReadable", "_Global_GetIsLockerItem");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

void Readable_SetId(const tString&in asItem, const tString &in asId)
{
	cScript_SetGlobalArgString(0, asId);
	cScript_RunGlobalFunc(asItem, "cScrPropReadable", "_Global_SetId");
}


//-------------------------------------------------------

/////////////////////////////////////////
// DOGTAG
/////////////////////////////////////////

//-------------------------------------------------------

bool Dogtag_GetIsRandomizeable(const tString& in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropReadableDogTag", "_Global_GetIsRandomizeable");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

void Dogtag_SetCombination(const tString& in asEntity, int alCombination)
{
	cScript_SetGlobalArgInt(0, alCombination);
	cScript_RunGlobalFunc(asEntity, "cScrPropReadableDogTag", "_Global_SetCombination");
}

//-------------------------------------------------------

/////////////////////////////////////////
// LAMP
/////////////////////////////////////////

//-------------------------------------------------

bool Lamp_GetFlickerActive(const tString&in asLamp)
{
	cScript_RunGlobalFunc(asLamp, "cScrPropLamp", "_Global_GetFlickerActive");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

/////////////////////////////////////////
// CHAIN LOCK
/////////////////////////////////////////

//-------------------------------------------------

bool ChainLock_GetIsBroken(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropChainLock", "_Global_GetIsBroken");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

void _ChainLock_OnTimer_Break(const tString &in asTimer)
{
	cScript_RunGlobalFunc(asTimer, "cScrPropChainLock", "_Global_Break");
	Effect_Rumble_Start(0.5, 0.5);
}

//-------------------------------------------------

void _OnAnimEnd_CutChainLock(const tString &in asAnim)
{
	PlayerBody_SetArmAnimationPitch(true, true, false);
	PlayerHands_PlayAnimation("tool_cutter_idle", true, false, 0.f, Item_GetHeldEntity(eItemHandlerHand_Right), true, 1.f, -1.f, true, true);
	
	Achievement_IncreaseCleithrophobistCount();
}

//-------------------------------------------------

void _Trap_OnTimer_Disarm(const tString &in asTimer)
{
	cScript_RunGlobalFunc(asTimer, "cScrPropTrap", "_Global_Disarm");
}

//-------------------------------------------------

void _OnTimer_MedkitUsed(const tString &in asTimer)
{
	Player_ApplyHeal(false);
	
	if (asTimer == "Timer_MedkitUsed_B")
	{
		tString sItemToRemove = cLux_GetCurrentMap().GetTimerUserVarString(asTimer);
		Item_RemoveFromInventory(sItemToRemove, eInventoryInstance_Player, false, true);
		_DestroyHealthAnimEnts("medkit_use_kit", "medkit_use_bandage");
	}
}

//-------------------------------------------------

void _OnTimer_BandageUsed(const tString &in asTimer)
{
	Player_ApplyHeal(false);
	
	tString sItemToRemove = cLux_GetCurrentMap().GetTimerUserVarString(asTimer);
	
	Item_RemoveFromInventory(sItemToRemove, eInventoryInstance_Player, false, true);	
	_DestroyHealthAnimEnts("bandage_use_roll", "");
	
	if (ItemType_GetCountInInventory("Bandage") > 0)
		Item_Equip(ItemType_GetFirstInInventory("Bandage"));
}

//-------------------------------------------------------

void _OnTimer_SetBandageRollVisible(const tString &in asTimer)
{
	iLuxEntity@ pRoll = cLux_GetCurrentMap().GetEntityByName("bandage_use_roll", eLuxEntityType_Prop);
	cMeshEntity@ pMeshEnt = pRoll !is null ? pRoll.GetMeshEntity() : null;
	
	if (pMeshEnt !is null)
	{
		pMeshEnt.SetVisible(true);
		pMeshEnt.ResetGraphicsUpdated();
	}
}

//-------------------------------------------------------

void _DestroyHealthAnimEnts(const tString &in asEntA, const tString &in asEntB)
{
	cLuxMap@ pMap = cLux_GetCurrentMap();
	iScrPlayerBodyHandler_Interface@ pPlayerBody = cast<iScrPlayerBodyHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_PlayerBodyHandler));
	iLuxEntity@ pUseItemA = pMap !is null ? pMap.GetEntityByName(asEntA, eLuxEntityType_Prop) : null;
	iLuxEntity@ pUseItemB = pMap !is null ? pMap.GetEntityByName(asEntB, eLuxEntityType_Prop) : null;
	
	if (pMap is null) return;
	if (pPlayerBody is null) return;
	
	if (pUseItemA !is null)
	{
		pPlayerBody.DetachProp(pUseItemA.GetName());
		pMap.DestroyEntity(pUseItemA);
	}
	
	if (pUseItemB !is null)
	{
		pPlayerBody.DetachProp(pUseItemB.GetName());
		pMap.DestroyEntity(pUseItemB);
	}	
}

//-------------------------------------------------------

/////////////////////////////////////////
// PADLOCK
/////////////////////////////////////////

//-------------------------------------------------

tString Padlock_GetAnimationPositionEntity(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropPadlock", "_Global_GetAnimationPositionEntity");
	return cScript_GetGlobalReturnString();
}

//-------------------------------------------------

void Padlock_UnlockDoor(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropPadlock", "_Global_UnlockDoor");
}

//-------------------------------------------------

void _Padlock_OnTimer_Break(const tString &in asTimer)
{
	cScript_RunGlobalFunc(asTimer, "cScrPropPadlock", "_Global_Break");
	Effect_Rumble_Start(0.5, 0.5);
}

//-------------------------------------------------

void _Padlock_OnTimer_ResetCollideFlag(const tString &in asTimer)
{
	cLuxMap@ pMap = cLux_GetCurrentMap();
	if (pMap is null) return;	
	iLuxEntity@ pEnt = pMap.GetEntityByName(asTimer, eLuxEntityType_Prop);
	if (pEnt is null) return;
	
	uint lFlag = pMap.GetCollideFlag("+brokenpadlock");
	for (int i = 0; i < pEnt.GetBodyNum(); ++i)
	{
		iPhysicsBody@ pBody = pEnt.GetBody(i);
		if (pBody is null) continue;
		pBody.SetCollideFlags(lFlag);
	}
}

//-------------------------------------------------

/////////////////////////////////////////
// COMBINATION LOCK
/////////////////////////////////////////

//-------------------------------------------------

void CombinationLock_SetCombination(const tString&in asEntity, int alCombination)
{
	cScript_SetGlobalArgInt(0, alCombination);
	cScript_RunGlobalFunc(asEntity, "cScrPropCombinationLock", "_Global_SetCombination");
}

//-------------------------------------------------

void CombinationLock_SetOpenDoorOnUnlock(const tString &in asEntity, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asEntity, "cScrPropCombinationLock", " _Global_SetOpenDoorOnUnlock");	
}

//-------------------------------------------------

/////////////////////////////////////////
// GRATING
/////////////////////////////////////////

//-------------------------------------------------

void Grating_Open(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropGrating", "_Global_Open");
}

//-------------------------------------------------

bool Grating_GetIsOpen(const tString &in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropGrating", "_Global_GetIsOpen");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

void Grating_RemoveBolt(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropGrating", "_Global_RemoveBolt");
}

//-------------------------------------------------

tString Grating_GetBolt(const tString&in asEntity, bool abRight)
{
	cScript_SetGlobalArgBool(0, abRight);
	cScript_RunGlobalFunc(asEntity, "cScrPropGrating", "_Global_GetBolt");
	return cScript_GetGlobalReturnString();
}

//-------------------------------------------------

void _Wrench_OnTimer_DestroyBolt(const tString&in asTimer)
{
	Entity_Destroy(asTimer);
}

//-------------------------------------------------

void _Wrench_OnTimer_RemoveBolt(const tString&in asTimer)
{
	Grating_RemoveBolt(asTimer);
	Player_SetCrouching(true, true, true);
	PlayerBody_SetArmAnimationPitch(true, true, false);
	PlayerHands_PlayAnimation("tool_wrench_idle", true, false, 0.f, Item_GetHeldEntity(eItemHandlerHand_Right), true, 1.f, -1.f, true, true);
}

//-------------------------------------------------

/////////////////////////////////////////
// THROWABLE
/////////////////////////////////////////

//-------------------------------------------------

void _Throwable_ActivateThrownCollision(const tString&in asTimer)
{
	cLuxProp@ pProp = cLux_ToProp(cLux_GetCurrentMap().GetEntityByName(asTimer, eLuxEntityType_Prop));
	if (pProp is null) return;
	
	for (int i = 0; i < pProp.GetBodyNum(); ++i)
	{
		iPhysicsBody@ pBody = pProp.GetBody(i);
		if (pBody is null) continue;
		
		pBody.SetCollide(true);
		pBody.SetCollideCharacter(true);
	}
}

//-------------------------------------------------

/////////////////////////////////////////
// TRAPS
/////////////////////////////////////////

//-------------------------------------------------

shared enum eTrapType
{
	eTrapType_Grenade,
	eTrapType_Gas,
	eTrapType_Fire,
	
	eTrapType_LastEnum
}

//-------------------------------------------------

void Trap_SetType(const tString&in asEntity, eTrapType aType)
{
	cScript_SetGlobalArgInt(0, aType);
	cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_SetTrapType");
}

//-------------------------------------------------

void Trap_GetAvailableTypes(const tString&in asEntity, array<bool> &out avTypes)
{
	avTypes.resize(eTrapType_LastEnum);
	for (int i = 0; i < eTrapType_LastEnum; i++)
	{
		cScript_SetGlobalArgInt(0, i);
		cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_GetTypeAvailable");
		
		avTypes[i] = cScript_GetGlobalReturnBool();
	}
}

//-------------------------------------------------

bool Trap_GetIsTriggered(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_GetIsTriggered");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

bool Trap_GetIsArmed(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_GetIsArmed");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

void Trap_Trigger(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "Trigger");
}

//-------------------------------------------------

void Trap_SetHitboxActive(const tString&in asEntity, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_SetHitboxActive");
}

//-------------------------------------------------

bool Trap_GetCanBlockPath(const tString &in asEntity, tID a_idBody = tID_Invalid)
{
	cScript_SetGlobalArgID(0, a_idBody);
	cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_GetCanBlockPath");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

bool Trap_GetExcludeFromRandomization(const tString &in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_GetExcludeFromRandomization");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

void Trap_SetCanBeTriggeredByRats(const tString&in asEntity, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	if (cScript_RunGlobalFunc(asEntity, "cScrPropTrap", "_Global_SetCanBeTriggeredByRats") == false)
	{
		Error("Could not run '"+asEntity+"' / _Global_SetCanBeTriggeredByRats()");
	}
}

//-------------------------------------------------

/////////////////////////////////////////
// GRENADES
/////////////////////////////////////////

//-------------------------------------------------

void Grenade_SetFuseTime(const tString&in asEntity, float afTime)
{
	cScript_SetGlobalArgFloat(0, afTime);
	cScript_RunGlobalFunc(asEntity, "cScrPropGrenade", "_Global_SetCustomFuseTime");
}

//-------------------------------------------------

void Grenade_SetDamagePlayer(const tString&in asEntity, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(asEntity, "cScrPropGrenade", "_Global_SetDamagePlayer");
}

//-------------------------------------------------

void GasGrenade_SetFuseTime(const tString&in asEntity, float afTime)
{
	cScript_SetGlobalArgFloat(0, afTime);
	cScript_RunGlobalFunc(asEntity, "cScrPropGasGrenade", "_Global_SetCustomFuseTime");
}

//-------------------------------------------------

void GasGrenade_SetParticleSuffix(const tString &in asEntity, const tString &in asSuffix)
{
	cScript_SetGlobalArgString(0, asSuffix);
	cScript_RunGlobalFunc(asEntity, "cScrPropGasGrenade", "_Global_SetParticleSuffix");
}

//-------------------------------------------------

/////////////////////////////////////////
// FUEL SPILL
/////////////////////////////////////////

//-------------------------------------------------

void FuelSpill_Ignite(const tString&in asEntity, bool abIntentional)
{
	cScript_SetGlobalArgBool(0, abIntentional);
	cScript_RunGlobalFunc(asEntity, "cScrPropFuelSpill", "_Global_Ignite");
}

//-------------------------------------------------

bool FuelSpill_GetCanIgnite(const tString&in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropFuelSpill", "_Global_GetCanIgnite");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

/////////////////////////////////////////
// EXPLOSIVE BARREL
/////////////////////////////////////////

//-------------------------------------------------

void ExplosiveBarrel_SetRadius(const tString &in asEntity, float afRadius)
{
	cScript_SetGlobalArgFloat(0, afRadius);
	cScript_RunGlobalFunc(asEntity, "cScrPropExplosiveBarrel", "_Global_SetRadius");
}

//-------------------------------------------------