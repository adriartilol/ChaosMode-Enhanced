#include "custom/modules/ModuleInterfaces_Custom.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_audio.hps"
#include "player/PlayerTypes_Custom.hps"
#include "custom/agents/agent_types_custom.hps"
#include "helpers/helper_player.hps"
#include "HeroStatsHandler_Types.hps"

//-------------------------------------------------

/////////////////////////////////////////
// SKETCHBOOK
/////////////////////////////////////////

//-------------------------------------------------

bool Sketchbook_IsOpen()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	return pHandler.IsSketchbookOpen();
}

//-------------------------------------------------

void Sketchbook_Open(const bool abPauseGame=true)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.OpenSketchbook(abPauseGame);
}

//-------------------------------------------------

bool Sketchbook_GetCanOpen()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	return pHandler.GetCanOpenSketchbook();
}

//-------------------------------------------------

void Sketchbook_SetCanOpen(bool abX)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.SetCanOpenSketchbook(abX);
}

//-------------------------------------------------

bool Sketchbook_GetIsNoteVoiceSubjectPlaying()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	return pHandler.GetIsNoteVoiceSubjectPlaying();
}

//-------------------------------------------------

void Sketchbook_ToggleState(int alState)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.ToggleSketchbookState(alState);
}

//-------------------------------------------------

void Sketchbook_SetState(int alState)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.SetSketchbookState(alState);
}

//-------------------------------------------------

void Sketchbook_Close()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.CloseSketchbook();
}

//----------------MOD----------------------------------

void Sketchbook_SetContentForNote(const tString &in asNoteID, const tWString &in asContent)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.SetContentForNote(asNoteID, asContent);
}

//-------------------------------------------------

void Sketchbook_AddNoteByID(const tString &in asNoteID)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.AddNoteByID(asNoteID);
}

//-------------------------------------------------

void Sketchbook_GetNoteData(const tString&in asNoteID_in, tString&out asAuthor_out, tString&out asDate_out, tString&out asContent_out, tString&out asVoiceSubject_out)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.GetNoteData(asNoteID_in, asAuthor_out, asDate_out, asContent_out, asVoiceSubject_out);
}

//-------------------------------------------------------

bool Sketchbook_GetHasNote(const tString &in asNoteID)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	return pHandler.GetHasNote(asNoteID);
}

//-------------------------------------------------------

bool Sketchbook_GetHasReadNote(const tString &in asNoteID)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	return pHandler.GetHasReadNote(asNoteID);
}	

//------------------------------------------------------- 

void Sketchbook_CollectAllNotes()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.CollectAllNotes();
}

//-------------------------------------------------

void Sketchbook_ClearNotes()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.ClearNotes();
}

//-------------------------------------------------

void Sketchbook_ToggleNotesListing()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.ToggleNotesListing();
}

//-------------------------------------------------

void Sketchbook_AddAllPhotos()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.AddAllPhotos();
}

void Sketchbook_ClearPhotos()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.ClearPhotos();
}

void Sketchbook_AddPhotoByID(const tString &in asID)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.AddPhotoByID(asID);
}

//-------------------------------------------------

void Sketchbook_SetInventoryEnabled(bool abX)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.SetInventoryEnabled(abX);
}

//-------------------------------------------------

void Sketchbook_AddMemoryCylinder(const tString&in asSubject, const tString&in asText)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.AddMemoryCylinder(asSubject, asText);
}

//------------------------------------------------------------

void Sketchbook_AddCode(const tString&in asName, const tString&in asCode)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.AddCode(asName, asCode);
}

//------------------------------------------------------------

bool Sketchbook_GetHasCode(const tString&in asName)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	return pHandler.GetHasCode(asName);
}

//------------------------------------------------------------

void Sketchbook_RemoveCode(const tString&in asName)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.RemoveCode(asName);
}

//------------------------------------------------------------//------------------------------------------------------------

void Sketchbook_SetCodeUsed(const tString&in asName, bool abUsed)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.SetCodeUsed(asName, abUsed);
}

//------------------------------------------------------------//------------------------------------------------------------

void Sketchbook_SetCodeUsedByCode(const tString&in asCode, bool abUsed)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.SetCodeUsedByCode(asCode, abUsed);
}

//------------------------------------------------------------

bool Sketchbook_GetIsAuxiliaryBoxEnabled()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	return pHandler.GetIsAuxiliaryBoxEnabled();
}

//-------------------------------------------------------

void Sketchbook_SetAuxiliaryBoxActive(bool abActive)
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.SetAuxiliaryBoxActive(abActive);
}

//-------------------------------------------------------

void Sketchbook_OpenAuxiliaryBox()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.OpenAuxiliaryBox();
}

//-------------------------------------------------------

void Sketchbook_CloseAuxiliaryBox()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.CloseAuxiliaryBox();
}

//-------------------------------------------------------

void Sketchbook_OnNewGame()
{
	iScrSketchbookUIHandler_Interface @pHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
	pHandler.OnNewGame();
}

//-------------------------------------------------

/////////////////////////////////////////
// TERROR
/////////////////////////////////////////

//-------------------------------------------------

void Terror_AddEnemy(tID aEnemy, float afTimeBeforeHunt = 6.0f)
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	pHandler.AddTerrorEnemy(aEnemy, afTimeBeforeHunt);
}

//-------------------------------------------------

void Terror_RemoveEnemy(tID aEnemy)
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	pHandler.RemoveTerrorEnemy(aEnemy);
}

//-------------------------------------------------

float Terror_GetAmount()
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	return pHandler.GetAmount();
}

//-------------------------------------------------

void Terror_AddHuntingEnemy(tID aEnemy)
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	pHandler.AddHuntingEnemy(aEnemy);
}

//-------------------------------------------------

void Terror_RemoveHuntingEnemy(tID aEnemy)
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	pHandler.RemoveHuntingEnemy(aEnemy);
}

//-------------------------------------------------

bool Terror_GetPlayerIsBeingHunted()
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	return pHandler.GetPlayerIsBeingHunted();
}

//-------------------------------------------------

void Terror_SetEnemyMusicStage(eTerrorMusicAgentType aAgentType, eTerrorMusicStage aStage)
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	pHandler.SetEnemyMusicStage(aAgentType, aStage);
}

void Terror_SetEnemyMusicActive(bool abX)
{
	iScrTerrorHandler_Interface @pHandler = cast<iScrTerrorHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_TerrorHandler));
	pHandler.SetEnemyMusicActive(abX);
}

//-------------------------------------------------

/////////////////////////////////////////
// AGENT BLACKBOARD
/////////////////////////////////////////

//-------------------------------------------------

void Blackboard_SetDebugMode(bool abActive)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.SetDebugMode(abActive);
}

//-------------------------------------------------

void Blackboard_AddEnemy(tID aEnemy)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.AddAgent(aEnemy);
}

//-------------------------------------------------

void Blackboard_RemoveEnemy(tID aEnemy)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.RemoveAgent(aEnemy);
}

//-------------------------------------------------

void Blackboard_SetEnemyHunt(tID aEnemy, bool abHunt)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.SetAgentHunt(aEnemy, abHunt);
}

//-------------------------------------------------

int Blackboard_GetHuntingAgentCount()
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetHuntingAgentCount();
}

//-------------------------------------------------

int Blackboard_GetHuntingAgentCountInRadius(const cVector3f &in avPos, float afRadius)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetHuntingAgentCountInRadius(avPos, afRadius);
}

//-------------------------------------------------

int Blackboard_GetAgentCount()
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetAgentCount();
}

//-------------------------------------------------

tID Blackboard_GetClosestAgent(const cVector3f &in avPos)
{
    iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetClosestAgent(avPos);
}

//-------------------------------------------------

void Blackboard_ShowDebug(bool abX)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.ShowDebug(abX);
}

//-------------------------------------------------

int Blackboard_RegisterGhoulHoleNetwork(cLuxMap@ apMap, const tString &in asNetworkName)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.RegisterGhoulHoleNetwork(apMap, asNetworkName);
}

//-------------------------------------------------

array<tID> Blackboard_GetGhoulHoleNetwork(int mlId)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetGhoulHoleNetwork(mlId);
}

//-------------------------------------------------

void Blackboard_SetGhoulHoleUsed(tID a_idHole, tID a_idAgent)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.SetGhoulHoleUsed(a_idHole, a_idAgent);
}

//-------------------------------------------------

void Blackboard_RemoveGhoulHoleUsed(tID a_idHole)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.RemoveGhoulHoleUsed(a_idHole);
}

//-------------------------------------------------

void Blackboard_RemoveGhoulHolesUsedBy(tID a_idAgent)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.RemoveGhoulHolesUsedBy(a_idAgent);
}

//-------------------------------------------------

bool Blackboard_GetGhoulHoleUsed(tID a_idHole)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetGhoulHoleUsed(a_idHole);
}

//-------------------------------------------------

tID Blackboard_GetClosestGhoulHole(int alNetworkId, const cVector3f &in avPos, float afMinRadius = -1.0f, float afMaxRadius = -1.0f, bool abOnlyFree = false, bool abOnlyOutOfPlayerSight = false, array<tID>@ avExcludeHoles = null)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetClosestGhoulHole(alNetworkId, avPos, afMinRadius, afMaxRadius, abOnlyFree, abOnlyOutOfPlayerSight, avExcludeHoles);
}

//-------------------------------------------------

tID Blackboard_GetRandomGhoulHole(int alNetworkId, const cVector3f &in avPos, float afMinRadius = -1.0f, float afMaxRadius = -1.0f, bool abOnlyFree = false, bool abOnlyOutOfPlayerSight = false, array<tID>@ avExcludeHoles = null)
{
	iScrAgentBlackboardModule_Interface @pHandler = cast<iScrAgentBlackboardModule_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetRandomGhoulHole(alNetworkId, avPos, afMinRadius, afMaxRadius, abOnlyFree, abOnlyOutOfPlayerSight, avExcludeHoles);
}

//-------------------------------------------------

bool Blackboard_GetCanBodyBlockPath(iPhysicsBody@ apBody)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetCanBodyBlockPath(apBody);
}

//-------------------------------------------------

tID Blackboard_GetFarthestGhoulHole(int alNetworkId, const cVector3f &in avPos, float afMinRadius = -1.0f, float afMaxRadius = -1.0f, bool abOnlyFree = false, bool abOnlyOutOfPlayerSight = false,array<tID>@ avExcludeHoles = null)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetFarthestGhoulHole(alNetworkId, avPos, afMinRadius, afMaxRadius, abOnlyFree, abOnlyOutOfPlayerSight, avExcludeHoles);
}

//-------------------------------------------------

tID Blackboard_GetGhoulHoleInPosDir(int alNetworkId, const cVector3f &in avPos, const cVector3f &in avDir, float afMinRadius = -1.0f, float afMaxRadius = -1.0f, bool abOnlyFree = false, bool abClosest = false, bool abOnlyOutOfPlayerSight = false, array<tID>@ avExcludeHoles = null)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetGhoulHoleInPosDir(alNetworkId, avPos, avDir, afMinRadius, afMaxRadius, abClosest, abOnlyFree, abOnlyOutOfPlayerSight, avExcludeHoles);
}

//-------------------------------------------------

void Blackboard_SetupStalkerMapTransfer(const tString &in asStalker)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.SetupStalkerMapTransfer(asStalker);
}

//-------------------------------------------------

void Blackboard_DoStalkerMapTransfer(const tString &in asStalker)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.DoStalkerMapTransfer(asStalker);
}

//-------------------------------------------------

void Blackboard_AddDamageAreaBody(tID a_idBody)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.AddDamageAreaBody(a_idBody);
}

//-------------------------------------------------

int Blackboard_GetPathBlockerCounter()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetPathBlockerCounter();
}

//-------------------------------------------------

array<tID>@ Blackboard_GetPathBlockerBodyIds(bool abPhysical, bool abDamageArea)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetPathBlockerBodyIds(abPhysical, abDamageArea);
}

//-------------------------------------------------

array<tID>@ Blackboard_GetPathBlockerBodyCluster(tID a_idBody)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetPathBlockerBodyCluster(a_idBody);
}

//-------------------------------------------------

bool Blackboard_GetIsBodyDamageArea(iPhysicsBody@ apBody)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetIsBodyDamageArea(apBody);
}

//-------------------------------------------------

bool Blackboard_GetIsBodyPlayerPathBlocker(iPhysicsBody@ apBody)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetIsBodyPlayerPathBlocker(apBody);
}

//-------------------------------------------------

void Blackboard_SetPlayerBlocksPath(cLuxAgent@ apAgent, bool abX)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.SetPlayerBlocksPath(apAgent, abX);
}

//-------------------------------------------------

void Blackboard_IncStalkerRetreatByShotCount()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.IncStalkerRetreatByShotCount();
}

//-------------------------------------------------

int Blackboard_GetStalkerRetreatByShotCount()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetStalkerRetreatByShotCount();
}

//-------------------------------------------------

void Blackboard_IncStalkerShotCount()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.IncStalkerShotCount();
}

//-------------------------------------------------

int Blackboard_GetStalkerShotCount()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetStalkerShotCount();
}

//-------------------------------------------------

eStalkerInterestIncreaseBehaviour Blackboard_GetStalkerInterestIncreaseBehaviour()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetStalkerInterestIncreaseBehaviour();
}

//-------------------------------------------------

void Blackboard_SetStalkerReachOutHoleCooldown(float afTime)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.SetStalkerReachOutHoleCooldown(afTime);
}

//-------------------------------------------------

float Blackboard_GetStalkerReachOutHoleCooldown()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetStalkerReachOutHoleCooldown();
}

//-------------------------------------------------

void Blackboard_SetStalkerSitAndWaitCooldown(float afTime)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.SetStalkerSitAndWaitCooldown(afTime);
}

//-------------------------------------------------

float Blackboard_GetStalkerSitAndWaitCooldown()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetStalkerSitAndWaitCooldown();
}

//-------------------------------------------------

eStalkerEscalation Blackboard_GetStalkerEscalation()
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	return pHandler.GetStalkerEscalation();
}

//-------------------------------------------------

void Blackboard_IncreaseStalkerEscalation(bool abFullStep)
{
	iScrAgentBlackboardModule_Interface@ pHandler = cast<iScrAgentBlackboardModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_AgentBlackboard));
	pHandler.IncreaseStalkerEscalation(abFullStep);
}

//-------------------------------------------------

/////////////////////////////////////////
// DEATH
/////////////////////////////////////////

//-------------------------------------------------

void Death_Start(const tString &in asSource)
{
	iScrDeathHandler_Interface@ pHandler = cast<iScrDeathHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_DeathHandler) );
	pHandler.StartDeath(asSource);
}

//-------------------------------------------------

void Death_SetDeathAnimation(const tString &in asAnim)
{
	iScrDeathHandler_Interface@ pHandler = cast<iScrDeathHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_DeathHandler) );
	pHandler.SetDeathAnimation(asAnim);
}

//-------------------------------------------------

void Death_SetCustomDeathBehaviour(bool abX)
{
	iScrDeathHandler_Interface@ pHandler = cast<iScrDeathHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_DeathHandler) );
	pHandler.SetCustomDeathBehaviour(abX);
}

//-------------------------------------------------

void Death_ResetDeathEffects()
{
	iScrDeathHandler_Interface@ pHandler = cast<iScrDeathHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_DeathHandler) );
	pHandler.ResetDeathEffects();
}

//-------------------------------------------------

/////////////////////////////////////////
// PLAYER BODY HANDLER
/////////////////////////////////////////

//-------------------------------------------------------

void PlayerBody_SetSwimStateActive(const bool abActive, const tString&in asStartPositionEntity="", const tString&in asTargetEntity="", const tString&in asWaterEntity="", float afAnimBlendInTime=0.3f)
{
	iScrPlayerBodyHandler_Custom_Interface @pBody = cast<iScrPlayerBodyHandler_Custom_Interface>(cLux_GetUserModuleFromID(eModuleType_PlayerBodyHandler));
	pBody.SetSwimStateActive(abActive, asStartPositionEntity, asTargetEntity, asWaterEntity, afAnimBlendInTime);
}

//-------------------------------------------------------

void PlayerBody_SetSwimBodyYaw(const float afAngle)
{
	iScrPlayerBodyHandler_Custom_Interface @pBody = cast<iScrPlayerBodyHandler_Custom_Interface>(cLux_GetUserModuleFromID(eModuleType_PlayerBodyHandler));
	pBody.SetSwimBodyYaw(afAngle);
}

//-------------------------------------------------------

/*
 * Sets wheter items should be unequipped automatically when a cutscene starts. Resets to true after the animation has played.
 */
void PlayerBody_SetUnequipItemsOnCutscene(bool abX)
{
	iScrPlayerBodyHandler_Custom_Interface @pBody = cast<iScrPlayerBodyHandler_Custom_Interface>(cLux_GetUserModuleFromID(eModuleType_PlayerBodyHandler));
	pBody.SetUnequipItemsOnCutscene(abX, abX);
}

void PlayerBody_SetUnequipItemsOnCutscene(bool abLeftHand, bool abRightHand)
{
	iScrPlayerBodyHandler_Custom_Interface @pBody = cast<iScrPlayerBodyHandler_Custom_Interface>(cLux_GetUserModuleFromID(eModuleType_PlayerBodyHandler));
	pBody.SetUnequipItemsOnCutscene(abLeftHand, abRightHand);
}

//-------------------------------------------------------

/////////////////////////////////////////
// PLAYER EMOTION HANDLER
/////////////////////////////////////////

//-------------------------------------------------------

void PlayerEmotion_SetActive(bool abActive)
{
	iScrPlayerEmotionHandler_Interface@ pHandler = cast<iScrPlayerEmotionHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_PlayerEmotionHandler));
	pHandler.SetActive(abActive);
}

//-------------------------------------------------------

bool PlayerEmotion_GetIsActive()
{
	iScrPlayerEmotionHandler_Interface@ pHandler = cast<iScrPlayerEmotionHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_PlayerEmotionHandler));
	return pHandler.GetIsActive();
}

//-------------------------------------------------------

/**
 * Starts a new emotion sound instance
 * @param aPlaylistType, in what list to add the emotion sound.
 * @param aType, eEmotionSoundType_Loop (just a normal looping sound - no params support), eEmotionSoundType_RateLoop (takes fear rate, fear focus, and fear level parameters), eEmotionSoundType_FearLoop (takes fear rate, fear focus, fear cap, and fear level parameters), aType > eEmotionSoundType_OneShotEvent is an one shot sound - no params support.
 * @param alPrio, The priority of this sound. If lower compared to the current sound played action will be skipped.
 * @param asSoundFile, The sound template used for this.
 * @param afDuration, How long will the sound last if a looping template. If < 0 and a looping template, it will loop for ever.
 * @param afFadeIn, Fade in time.
 * @param afFadeOut, Fade out time.
 */
 
int PlayerEmotion_PlaySound(eEmotionPlaylistType aPlaylistType, eEmotionSoundType aEmotionSoundType, const int alPrio, const tString&in asSoundFile, const float afDuration=-1.f, const float afFadeIn=0.1f, const float afFadeOut=0.2f)
{
	iScrPlayerEmotionHandler_Interface@ pHandler = cast<iScrPlayerEmotionHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_PlayerEmotionHandler));
	return pHandler.StartEmotionSoundInst(aPlaylistType, aEmotionSoundType, alPrio, asSoundFile, afDuration, afFadeIn, afFadeOut);
}

//-------------------------------------------------------

/**
 * Updates the sound parameters of the current breath sound played. It doesn't work for one-shot sound types.
 * @param aPlaylistType, what list to look into for the emotion sound ID;
 * @param alID, Emotion sound class ID;
 * @param afParam, The param value
 */
 
void PlayerEmotion_SetSoundParam(eEmotionPlaylistType aPlaylistType, const int alID, float afParam)
{
	iScrPlayerEmotionHandler_Interface@ pHandler = cast<iScrPlayerEmotionHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_PlayerEmotionHandler));
	pHandler.SetEmotionSoundInstParam(aPlaylistType, alID, afParam);
}

//-------------------------------------------------------

/**
 * Updates the sound volume of the current breath sound played. It doesn't work for one-shot sound types.
 * @param aPlaylistType, what list to look into for the emotion sound ID;
 * @param alID, Emotion sound class ID;
 * @param afVolume, The new max volume.
 */
 
void PlayerEmotion_SetSoundVolume(eEmotionPlaylistType aPlaylistType, const int alID, const float afVolume)
{
	iScrPlayerEmotionHandler_Interface@ pHandler = cast<iScrPlayerEmotionHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_PlayerEmotionHandler));
	pHandler.SetEmotionSoundInstVolume(aPlaylistType, alID, afVolume);
}

//-------------------------------------------------------

/**
 * Stops the specified breathing sound.
 * @param aPlaylistType, what list to look into for the emotion sound ID;
 * @param alID, Emotion sound class ID;
 * @param afFadeOut, fade out time. If > 0 it'll overwrite the value set when the emotion sound was created.
 */
 
void PlayerEmotion_StopSound(eEmotionPlaylistType aPlaylistType, const int alID, float afFadeOut=-1)
{
	iScrPlayerEmotionHandler_Interface@ pHandler = cast<iScrPlayerEmotionHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_PlayerEmotionHandler));
	pHandler.StopEmotionSoundInst(aPlaylistType, alID, afFadeOut);
}

//-------------------------------------------------------

/**
 * Pauses the specified breathing sound.
 * @param aPlaylistType, what list to look into for the emotion sound ID;
 * @param alID, Emotion sound class ID;
 * @param abPause, desired pause state.
 */
 
void PlayerEmotion_PauseSound(eEmotionPlaylistType aPlaylistType, const int alID, bool abPause)
{
	iScrPlayerEmotionHandler_Interface@ pHandler = cast<iScrPlayerEmotionHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_PlayerEmotionHandler));
	pHandler.PauseEmotionSoundInst(aPlaylistType, alID, abPause);
}

//-------------------------------------------------------

/////////////////////////////////////////
// FONT
/////////////////////////////////////////

//-------------------------------------------------

/**
 * What game language is used. Will dictate the fonts used.
 * @param asLanguage, what language the game is set to.
 */
void FontHandler_SetLanguage(const tString &in asLanguage)
{
	iScrFontHandler_Interface@ pHandler = cast<iScrFontHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_FontHandler));
	pHandler.SetLanguage(asLanguage);
}

//------------------------------------------------------- 

/**
 * Get the right font depending on the language.
 * @param aFontType, what font needs to be read;
 * @param alSize, Font size to use. Currently supports 56, 72, 96.
 */
 
tString FontHandler_GetFont(eFontType aFontType, int alSize)
{
	iScrFontHandler_Interface@ pHandler = cast<iScrFontHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_FontHandler));
	return pHandler.GetFont(aFontType, alSize);
}

//-------------------------------------------------

/////////////////////////////////////////
// SAVE/LOAD
/////////////////////////////////////////

//-------------------------------------------------

void SaveRoom_Setup(const tString &in asLamp, const tString &in asRoomArea)
{
	iScrSaveRoomHandler_Interface@ pHandler = cast<iScrSaveRoomHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_SaveRoomHandler));
	pHandler.Setup(asLamp, asRoomArea);
}

//-------------------------------------------------

void SaveRoom_SaveGame(bool abShowIcon, bool abManualSave)
{
	iScrSaveRoomHandler_Interface@ pHandler = cast<iScrSaveRoomHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_SaveRoomHandler));
	pHandler.SaveGame(abShowIcon, abManualSave);
}

//-------------------------------------------------

void SaveRoom_LoadLastSave()
{
	iScrSaveRoomHandler_Interface@ pHandler = cast<iScrSaveRoomHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_SaveRoomHandler));
	pHandler.LoadLastSave();
}

//-------------------------------------------------

bool SaveRoom_GetPlayerIsInSaveRoom()
{
	iScrSaveRoomHandler_Interface@ pHandler = cast<iScrSaveRoomHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_SaveRoomHandler));
	return pHandler.GetPlayerIsInSaveRoom();
}

//-------------------------------------------------

int SaveRoom_GetManualSaveCount()
{
	iScrSaveRoomHandler_Interface@ pHandler = cast<iScrSaveRoomHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_SaveRoomHandler));
	return pHandler.GetManualSaveCount();
}

//-------------------------------------------------

void SaveRoom_SetSaveHintActive(bool abX)
{
	iScrSaveRoomHandler_Interface@ pHandler = cast<iScrSaveRoomHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_SaveRoomHandler));
	pHandler.SetSaveHintActive(abX);
}

//-------------------------------------------------

//////////////////////////////////
// GENERATOR
//////////////////////////////////

//-------------------------------------------------

void Generator_SetupEntities(const tString &in asGenerator, const tString &in asPowerLamp, const tString &in asLever, 
							 const tString &in asFuelGauge, const tString &in asLamps, const tString &in asBackupLamps, const tString &in asWheel = "")
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.SetupEntities(asGenerator, asPowerLamp, asLever, asFuelGauge, asLamps, asBackupLamps, asWheel);
}

//-------------------------------------------------

void Generator_EndSetup()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.EndSetup();
}

//-------------------------------------------------

void Generator_AddFuel(int alAmount)
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.AddFuel(alAmount);
}

//-------------------------------------------------

int Generator_GetFuelAddedTimestamp()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetFuelAddedTimestamp();
}

//-------------------------------------------------

void Generator_SetRunForever(bool abX)
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.SetRunForever(abX);
}

//-------------------------------------------------

bool Generator_GetRunForever()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetRunForever();
}

//-------------------------------------------------

void Generator_SetFuelAmount(int alAmount, float afTimeUntilDecrease = -1.f)
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.SetFuelAmount(alAmount, afTimeUntilDecrease);
}

//-------------------------------------------------

float Generator_GetFuelTimeLeft()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetFuelTimeLeft();
}

//-------------------------------------------------

float Generator_GetFullnessInteractLimit()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetFullnessInteractLimit();
}

//-------------------------------------------------

float Generator_GetFullness()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetFullness();
}

//-------------------------------------------------

void Generator_ChangeState(eGeneratorState aState)
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.ChangeState(aState);
}

//-------------------------------------------------

eGeneratorState Generator_GetState()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetState();
}

//-------------------------------------------------

void Generator_AddPowerSwitch(const tString &in asSwitch, const tString &in asParent, const tString &in asChild,
							  const tString &in asLamps, bool abOn)
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.AddPowerSwitch(asSwitch, asParent, asChild, asLamps, abOn);
}

//-------------------------------------------------

void Generator_SetPowerSwitchOn(const tString &in asSwitch, bool abOn)
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	pHandler.SetPowerSwitchOn(asSwitch, abOn, false);
}

//-------------------------------------------------

bool Generator_GetIsSetupDone()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetIsSetupDone();
}

//-------------------------------------------------

bool Generator_GetIsInCurrentMap()
{
	iScrGeneratorModule_Interface@ pHandler = cast<iScrGeneratorModule_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_Generator));
	return pHandler.GetGeneratorIsInCurrentMap();
}

//-------------------------------------------------

bool Generator_GetPlayerNearFuelHatch()
{
	tString sEnt = "Trigger_FuelHatch";
	iLuxEntity@ pEnt = cLux_GetCurrentMap().GetEntityByName(sEnt, eLuxEntityType_Area);
	if (pEnt !is null)
	{
		float fDistSqrtThreshold = 3.0f * 3.0f;
		float fDist = cMath_Vector3DistSqr(pEnt.GetPosition(), cLux_GetPlayer().GetCharacterBody().GetFeetPosition());
		if (fDist < fDistSqrtThreshold && Entity_IsInPlayerFOV(sEnt))
		{
			return true;
		}
				
		if (cLux_GetPlayer().CheckEntityCollision(pEnt) && 
			Player_GetCrossHairState() == eCrossHairState_Default)
		{
			return true;
		}
	}
	
	return false;
}

//-------------------------------------------------

bool Generator_GetPlayerNearFuelTap()
{
	tString sEnt = "Trigger_FuelBottleFiller";
	iLuxEntity@ pEnt = cLux_GetCurrentMap().GetEntityByName(sEnt, eLuxEntityType_Area);
	if (pEnt !is null)
	{
		float fDistSqrtThreshold = 2.0f * 2.0f;
		float fDist = cMath_Vector3DistSqr(pEnt.GetPosition(), cLux_GetPlayer().GetCharacterBody().GetFeetPosition());
		if (fDist < fDistSqrtThreshold && Entity_IsInPlayerFOV(sEnt))
		{
			return true;
		}
				
		if (cLux_GetPlayer().CheckEntityCollision(pEnt) && 
			Player_GetCrossHairState() == eCrossHairState_Default)
		{
			return true;
		}
	}
	
	return false;
}

//-------------------------------------------------

//////////////////////////////////
// RAT HANDLER
//////////////////////////////////

//-------------------------------------------------

void RatHandler_SetActive(bool abX)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.SetActive(abX);
}

//-------------------------------------------------

cVector3f RatHandler_AddEatingRat(tID a_idAgent, tID a_idArea)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.AddEatingRat(a_idAgent, a_idArea);
}

//-------------------------------------------------

void RatHandler_RemoveEatingRat(tID a_idAgent, float afDelay = 0, tID a_idSpecificFood = tID_Invalid)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemoveEatingRat(a_idAgent, afDelay, a_idSpecificFood);
}

//-------------------------------------------------

void RatHandler_SetFoodThreatTime(tID a_idFood, float afTime)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.SetFoodThreatTime(a_idFood, afTime);
}

//-------------------------------------------------

cVector3f RatHandler_GetFeedWorldPos(tID a_idAgent, tID a_idArea)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetFeedWorldPos(a_idAgent, a_idArea);
}

//-------------------------------------------------

void RatHandler_AddHidingRat(tID a_idAgent, tID a_idUsedHole = tID_Invalid)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.AddHidingRat(a_idAgent, a_idUsedHole);
}

//-------------------------------------------------

void RatHandler_RemoveHidingRat(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemoveHidingRat(a_idAgent);
}

//-------------------------------------------------

tID RatHandler_GetFreeFoodEntityId(tID a_idAgent, bool abCheckAttractionDistance, bool abCheckThrownMeat=false)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetFreeFoodEntityId(a_idAgent, abCheckAttractionDistance, abCheckThrownMeat);
}

//-------------------------------------------------

tID RatHandler_GetClosestFoodEntityId(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetClosestFoodEntityId(a_idAgent);
}

//-------------------------------------------------

bool RatHandler_AddAttackingRat(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.AddAttackingRat(a_idAgent);
}

//-------------------------------------------------

void RatHandler_RemoveAttackingRat(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemoveAttackingRat(a_idAgent);
}

//-------------------------------------------------

int RatHandler_GetAttackingRatCount()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetAttackingRatCount();
}

//-------------------------------------------------

bool RatHandler_GetAttackAllowed()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetAttackAllowed();
}
	
//------------------------------------------------------------
	
void RatHandler_DoRatAttack()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.DoRatAttack();
}
	
//------------------------------------------------------------

bool RatHandler_GetWarningAttackWasIssued()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetWarningAttackWasIssued();
}
	
//------------------------------------------------------------

bool RatHandler_GetWarningAttackIsPending()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetWarningAttackIsPending();
}
	
//------------------------------------------------------------

void RatHandler_IssueWarningAttack(tID a_idFoodEntity)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.IssueWarningAttack(a_idFoodEntity);
}

//-------------------------------------------------

bool RatHandler_AddAlertedRat(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.AddAlertedRat(a_idAgent);
}

//-------------------------------------------------

void RatHandler_RemoveAlertedRat(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemoveAlertedRat(a_idAgent);
}

//-------------------------------------------------

bool RatHandler_AddStalkingRat(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.AddStalkingRat(a_idAgent);
}

//-------------------------------------------------

void RatHandler_RemoveStalkingRat(tID a_idAgent)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemoveStalkingRat(a_idAgent);
}

//-------------------------------------------------

int RatHandler_GetStalkingRatCount()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetStalkingRatCount();
}

//-------------------------------------------------

void RatHandler_SetRatIgnoresDamageAreas(tID a_idAgent, bool abX)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.SetRatIgnoresDamageAreas(a_idAgent, abX);
}

//-------------------------------------------------

int RatHandler_GetBloodTrailNum()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetBloodTrailNum();
}

//-------------------------------------------------

tID RatHandler_GetBloodTrail(int alId)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetBloodTrail(alId);
}

//-------------------------------------------------

tID RatHandler_GetMostRecentBloodTrailIdAtPos(const cVector3f &in avPos, float afMaxDist)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetMostRecentBloodTrailIdAtPos(avPos, afMaxDist);
}

float RatHandler_GetBloodTrailIntensity(tID a_idTrail)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetBloodTrailIntensity(a_idTrail);
}

//-------------------------------------------------

void RatHandler_AddBloodTrail(tID a_idEntity, float afIntensity)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.AddBloodTrail(a_idEntity, afIntensity);
}

//-------------------------------------------------

void RatHandler_RemoveBloodTrail(tID a_idEntity)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemoveBloodTrail(a_idEntity);
}

//-------------------------------------------------

bool RatHandler_GetPointIsInsidePathBlocker(const cVector3f &in avPos, tID &out a_idBody)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetPointIsInsidePathBlocker(avPos, a_idBody);
}

//-------------------------------------------------

void RatHandler_SetPlayerThreatensRats(bool abX)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.SetPlayerThreatensRats(abX);
}

//-------------------------------------------------

bool RatHandler_GetPlayerThreatensRats()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetPlayerThreatensRats();
}

//-------------------------------------------------

bool RatHandler_GetRatFoodIsArea(tID a_idFood)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetRatFoodIsArea(a_idFood);
}

//-------------------------------------------------

bool RatHandler_GetRatFoodIsThrownMeat(tID a_idFood)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetRatFoodIsThrownMeat(a_idFood);
}

//-------------------------------------------------

tID RatHandler_GetBestHoleIdFromPos(const cVector3f &in avPos, bool abIgnoreEmergeTimer = true, float afDistanceThreshold = 5.0f)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetBestHoleIdFromPos(avPos, abIgnoreEmergeTimer, afDistanceThreshold);
}

//-------------------------------------------------

tID RatHandler_GetRandomHoleId(tID a_idIgnoredHole=tID_Invalid, bool abCheckPath = false, const cVector3f &in avStartPos = cVector3f_Zero)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetRandomHoleId(a_idIgnoredHole, abCheckPath, avStartPos);
}

//-------------------------------------------------

void RatHandler_AddFoodEntity(tID a_idEntity)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.AddFoodEntity(a_idEntity);
}

//-------------------------------------------------

void RatHandler_AddFoodEntity(iLuxEntity@ apEntity)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.AddFoodEntity(apEntity);
}

//-------------------------------------------------

void RatHandler_RemoveFoodEntity(tID a_idEntity)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemoveFoodEntity(a_idEntity);
}

//-------------------------------------------------

float RatHandler_GetPlayerDistanceToClosestRat()
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	return pHandler.GetPlayerDistanceToClosestRat();
}

//-------------------------------------------------

void RatHandler_AddPathBlocker(tID a_idBlocker, bool abIsDamageArea)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.AddPathBlocker(a_idBlocker, abIsDamageArea);
}

//-------------------------------------------------

void RatHandler_RemovePathBlocker(tID a_idBlocker)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.RemovePathBlocker(a_idBlocker);
}

//-------------------------------------------------

void RatHandler_ReportUnreachableFood(tID a_idFood)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.ReportUnreachableFood(a_idFood);
}

//-------------------------------------------------

void RatHandler_ReportReachableFood(tID a_idFood)
{
	iScrRatHandler_Interface@ pHandler = cast<iScrRatHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_RatHandler));
	pHandler.ReportReachableFood(a_idFood);
}

//-------------------------------------------------

/////////////////////////////////////////
// SOUND OCCLUSION
/////////////////////////////////////////

//-------------------------------------------------

bool SoundOcclusion_GetIsPointOccluded(const cVector3f &in avListenerPos, const cVector3f &in avPoint)
{
	return cLux_GetSoundOcclusionHandler().GetIsPointOccluded(avListenerPos, avPoint);
}

//-------------------------------------------------

void SoundOcclusion_AddForceOccludedSound(tID a_idSound)
{
	cLux_GetSoundOcclusionHandler().AddForceOccludedSound(a_idSound);
}

//-------------------------------------------------

void SoundOcclusion_RemoveForceOccludedSound(tID a_idSound)
{
	cLux_GetSoundOcclusionHandler().RemoveForceOccludedSound(a_idSound);
}

//-------------------------------------------------

/////////////////////////////////////////
// ENVIRONMENTAL DAMAGE
/////////////////////////////////////////

//-------------------------------------------------

tID EnvironmentalDamage_AddGasArea(tID a_idPS, const cVector3f &in avMin, const cVector3f &in avMax, bool abIsTrap)
{
	iScrEnvironmentalDamageHandler_Interface@ pHandler = cast<iScrEnvironmentalDamageHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_EnvironmentalDamageHandler));
	return pHandler.AddGasDamageArea(a_idPS, avMin, avMax, abIsTrap);
}

//-------------------------------------------------

tID EnvironmentalDamage_AddMolotovArea(tID a_idPS, const cVector3f &in avMin, const cVector3f &in avMax, bool abIsTrap)
{
	iScrEnvironmentalDamageHandler_Interface@ pHandler = cast<iScrEnvironmentalDamageHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_EnvironmentalDamageHandler));
	return pHandler.AddMolotovDamageArea(a_idPS, avMin, avMax, abIsTrap);
}

//-------------------------------------------------

void EnvironmentalDamage_RemoveArea(tID a_idPS)
{
	iScrEnvironmentalDamageHandler_Interface@ pHandler = cast<iScrEnvironmentalDamageHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_EnvironmentalDamageHandler));
	pHandler.RemoveDamageArea(a_idPS);
}

//-------------------------------------------------

array<tID> EnvironmentalDamage_GetDamageAreasOfType(eDamageType aType)
{
	iScrEnvironmentalDamageHandler_Interface@ pHandler = cast<iScrEnvironmentalDamageHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_EnvironmentalDamageHandler));
	return pHandler.GetDamageAreasOfType(aType);
}

//-------------------------------------------------

eDamageType EnvironmentalDamage_GetDamageAreaType(tID a_idArea)
{
	iScrEnvironmentalDamageHandler_Interface@ pHandler = cast<iScrEnvironmentalDamageHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_EnvironmentalDamageHandler));
	return pHandler.GetDamageAreaType(a_idArea);
}

//-------------------------------------------------

void EnvironmentalDamage_AddEntityToCheck(tID a_idEntity)
{
	iScrEnvironmentalDamageHandler_Interface@ pHandler = cast<iScrEnvironmentalDamageHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_EnvironmentalDamageHandler));
	pHandler.AddEntityToCheck(a_idEntity);
}

//-------------------------------------------------

void EnvironmentalDamage_RemoveEntityToCheck(tID a_idEntity)
{
	iScrEnvironmentalDamageHandler_Interface@ pHandler = cast<iScrEnvironmentalDamageHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_EnvironmentalDamageHandler));
	pHandler.RemoveEntityToCheck(a_idEntity);
}

//-------------------------------------------------

/////////////////////////////////////////
// IN GAME MAP
/////////////////////////////////////////

//-------------------------------------------------

void InGameMap_SetMapFound(const tString&in asMapName)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.SetMapFound(asMapName);
}

//-------------------------------------------------

bool InGameMap_GetMapFound(const tString&in asMapName)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	return pHandler.GetMapFound(asMapName);
}

//-------------------------------------------------

void InGameMap_UpdateGlobalMapState()
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.UpdateGlobalMapState();
}

//-------------------------------------------------

void InGameMap_AddObjective(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.AddObjective(asObjectiveID);
}

//-------------------------------------------------

void InGameMap_AddObjective(const tString&in asObjectiveID, float afDelay)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.AddObjective(asObjectiveID, afDelay);
}

//-------------------------------------------------

void InGameMap_RemoveObjective(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.RemoveObjective(asObjectiveID);
}

//-------------------------------------------------

bool InGameMap_HasObjective(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	return pHandler.HasObjective(asObjectiveID);
}

//-------------------------------------------------

bool InGameMap_IsObjectiveActive(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	return pHandler.IsObjectiveActive(asObjectiveID);
}

//-------------------------------------------------

bool InGameMap_IsObjectiveCompleted(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	return pHandler.IsObjectiveCompleted(asObjectiveID);
}

//-------------------------------------------------

void InGameMap_SetObjectiveCompleted(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.SetObjectiveCompleted(asObjectiveID);
}

//-------------------------------------------------

void InGameMap_SetObjectiveNotCompleted(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.SetObjectiveNotCompleted(asObjectiveID);
}

//-------------------------------------------------

bool InGameMap_GetCanAddObjective(const tString&in asObjectiveID)
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	return pHandler.GetCanAddObjective(asObjectiveID);
}

//-------------------------------------------------

void InGameMap_ShowUpdatedMapIcon()
{
	iScrInGameMapHandler_Interface@ pHandler = cast<iScrInGameMapHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_InGameMapHandler));
	pHandler.ShowUpdatedMapIcon();
}

//-------------------------------------------------

/////////////////////////////////////////
// GAME STATS HANDLER
/////////////////////////////////////////

//-------------------------------------------------

/**
 * Initializes the selected game stats slot. Adds and sets all stat entries to an init value.
 * @param abSave, true: Save the entries after resetting them, false: Entries reset but are not saved.
 */
void GameStats_ResetAllEntries(bool abSave=false)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.ResetAllEntries(abSave);
}

//-------------------------------------------------

/**
 * Starts and pauses the game time counter.
 * @param abX, true: Timer continues, false: Timer pauses.
 */
void GameStats_SetGameTimerActive(bool abX)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.SetGameTimerActive(abX);
}

//-------------------------------------------------

/**
 * Used to update the longest time between saves stat
 */
void GameStats_UpdateTimeBetweenSaves()
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.UpdateTimeBetweenSaves();
}

//-------------------------------------------------

/**
 * Draws the stats gui
 * @param abX, true: the game pauses and the stats gui is drawn, false: no gui
 */
void GameStats_SetGuiActive(bool abX)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.SetGuiActive(abX);
}

//-------------------------------------------------

/**
* Returns true if the stats gui is active and drawing
 */
bool GameStats_GetGuiActive()
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	return pHandler.GetGuiActive();
}

//-------------------------------------------------

bool GameStats_GetEntryExists(int alId)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	return pHandler.GetEntryExists(alId);
}

//-------------------------------------------------

void GameStats_AddEntry(int alId, const tString&in asName)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.AddEntry(alId, asName);
}

//-------------------------------------------------

void GameStats_RemoveEntry(int alId)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.RemoveEntry(alId);
}

//-------------------------------------------------

/**
 * Sets the entry to the defined amount
 * @param alId, the entry ID
 * @param alAmount, the entry amount
 */
void GameStats_SetEntryAmount(int alId, int alAmount)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.SetEntryAmount(alId, alAmount);
}

//-------------------------------------------------

/**
 * Increases the entry by a given amount. Default is +1.
 * @param alId, the entry ID
 * @param alAmount, amount to increase
 */
void GameStats_IncreaseEntryAmount(int alId, int alAmount=1)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.IncreaseEntryAmount(alId, alAmount);
	pHandler.UpdateTimeBetweenSaves();
}

//-------------------------------------------------

/**
 * Return the value of the defined entry
 * @param alId, the entry ID
 */
int GameStats_GetEntryAmount(int alId)
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	return pHandler.GetEntryAmount(alId);
}

//-------------------------------------------------

void GameStats_Save()
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.SaveStats();
}

//-------------------------------------------------

void GameStats_Load()
{
	iScrGameStatsHandler_Interface@ pHandler = cast<iScrGameStatsHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_GameStatsHandler));
	pHandler.LoadStats();
}

//-------------------------------------------------

/////////////////////////////////////////
// BULLET HANDLER
/////////////////////////////////////////

//-------------------------------------------------

int BulletHandler_AddBullet(const cVector3f &in avStart, const cVector3f &in avDir, eBulletType aType, 
							tID a_idSource, const tString &in asHitCallback = "")
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	return pHandler.AddBullet(avStart, avDir, aType, a_idSource, asHitCallback);
}

//-------------------------------------------------

void BulletHandler_SetMinPlayerHealth(int alBulletId, float afMinHealth)
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	pHandler.SetMinPlayerHealth(alBulletId, afMinHealth);
}

//-------------------------------------------------

void BulletHandler_SetCustomImpactEffectsForEntity(tID a_idEntity, const tString &in asPS, const tString &in asSound)
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	pHandler.SetCustomImpactEffectsForEntity(a_idEntity, asPS, asSound);
}

//-------------------------------------------------

void BulletHandler_SetImpactParticleSuffix(const tString &in asSuffix)
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	pHandler.SetImpactParticleSuffix(asSuffix);
}

//-------------------------------------------------

void BulletHandler_AddIgnoredEntity(int alBulletId, tID a_idEntity)
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	pHandler.AddIgnoredEntity(alBulletId, a_idEntity);
}

//-------------------------------------------------

void BulletHandler_AddGlobalIgnoredEntity(tID a_idEntity)
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	pHandler.AddGlobalIgnoredEntity(a_idEntity);
}

//-------------------------------------------------

void BulletHandler_AddGlobalIgnoredEntity(const tString &in asEntity)
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	
	array<tID> vEntIds;
	cLux_GetCurrentMap().GetEntityArrayID(asEntity, eLuxEntityType_Prop, "", vEntIds);
	
	for (int i = 0; i < vEntIds.size(); ++i)
	{
		pHandler.AddGlobalIgnoredEntity(vEntIds[i]);
	}
}

//-------------------------------------------------

float BulletHandler_GetTimeSinceLastBullet()
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	return pHandler.GetTimeSinceLastBullet();
}

//-------------------------------------------------

eBulletType BulletHandler_GetLastDamageBulletType()
{
	iScrBulletHandler_Interface@ pHandler = cast<iScrBulletHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BulletHandler));
	return pHandler.GetLastDamageBulletType();
}

//-------------------------------------------------

/////////////////////////////////////////
// BOMBING HANDLER
/////////////////////////////////////////

//-------------------------------------------------

void BombingHandler_SetActive(bool abX)
{
	iScrBombingHandler_Interface@ pHandler = cast<iScrBombingHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BombingHandler));
	pHandler.SetActive(abX);
}

void BombingHandler_TriggerBombEffect()
{
	iScrBombingHandler_Interface@ pHandler = cast<iScrBombingHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BombingHandler));
	pHandler.TriggerBombEffect();
}

void BombingHandler_SetWeak(bool abX)
{
	iScrBombingHandler_Interface@ pHandler = cast<iScrBombingHandler_Interface>(cLux_GetUserModuleFromID(eModuleType_Custom_BombingHandler));
	pHandler.SetWeak(abX);
}

//-------------------------------------------------

/////////////////////////////////////////
// RANDOMIZER
/////////////////////////////////////////

//-------------------------------------------------

int Randomizer_GetCode(const tString &in asName)
{
	iScrRandomizerHandler_Interface @pHandler = cast<iScrRandomizerHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_RandomizerHandler) );
	return pHandler.GetCode(asName);
}

//-------------------------------------------------

bool Randomizer_GetGasMaskRandomizationActive()
{
	iScrRandomizerHandler_Interface @pHandler = cast<iScrRandomizerHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_RandomizerHandler) );
	return pHandler.GetGasMaskRandomizationActive();
}

//-------------------------------------------------

void Randomizer_SetGasMaskRandomizationActive(bool abX)
{
	iScrRandomizerHandler_Interface @pHandler = cast<iScrRandomizerHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_RandomizerHandler) );
	pHandler.SetGasMaskRandomizationActive(abX);
}

//-------------------------------------------------

bool Randomizer_GetLighterRandomizationActive()
{
	iScrRandomizerHandler_Interface @pHandler = cast<iScrRandomizerHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_RandomizerHandler) );
	return pHandler.GetLighterRandomizationActive();
}

//-------------------------------------------------

void Randomizer_SetLighterRandomizationActive(bool abX)
{
	iScrRandomizerHandler_Interface @pHandler = cast<iScrRandomizerHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_RandomizerHandler) );
	pHandler.SetLighterRandomizationActive(abX);
}

//-------------------------------------------------

void Randomizer_ReRunQuestItemRandomization()
{
	iScrRandomizerHandler_Interface @pHandler = cast<iScrRandomizerHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_RandomizerHandler) );
	pHandler.ReRunQuestItemRandomization();
}