#include "interfaces/Prop_Interface.hps"
#include "base/Player_Types.hps"
#include "helpers/helper_modules.hps"

#include "custom/helpers/helper_modules_custom.hps"
#include "helpers/helper_player.hps"

class cScrPropReadable : iScrProp, iScrProp_Interface
{
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// LOADING
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void SetupAfterLoad(cWorld @apWorld, cResourceVarsObject@ apVars, cResourceVarsObject@ apInstanceVars)
	{
		///////////////////////////////////
		// Type vars
		msReadableID = apVars.GetVarString("ID", "");
		
		msOpenEntityFile = apVars.GetVarString("OpenEntityFile", "");
		if (msOpenEntityFile == "") 
			msOpenEntityFile = GetBase().GetFileName();
		mfDistanceFromCamera = apVars.GetVarFloat("DistanceFromCamera", 0.3f);
		mfYStartOffset = apVars.GetVarFloat("YStartOffset", -0.5f);
		msOpenSound = apVars.GetVarString("OpenSound", "");
		msCloseSound = apVars.GetVarString("CloseSound", "");
		msPageTurnSound = apVars.GetVarString("PageTurnSound", "");
		msHighResMaterial = apVars.GetVarString("HighResMaterial", "");
		mfNoteScale = apVars.GetVarFloat("PopUpScale", 1.0f);
		mfNoteYOffs = apVars.GetVarFloat("PopUpYOffset", 0.0f);

		///////////////////////////////////
		// Instance vars
		mfFOV = cMath_ToRad(apInstanceVars.GetVarFloat("VerticalFOV", 70));

		//Overwrites the LoadVariables if these have values.
		if(apInstanceVars.GetVarString("ID", "") != "")
			msReadableID = apInstanceVars.GetVarString("ID", "");
			
		if(apInstanceVars.GetVarString("OpenEntityFile", "") != "")
			msOpenEntityFile = apInstanceVars.GetVarString("OpenEntityFile", GetBase().GetFileName());
		
		msCloseCallback = apInstanceVars.GetVarString("CloseCallback", "");
		
		mfNoteScale = mfNoteScale*apInstanceVars.GetVarFloat("PopUpScale", 1.0f);
		mfNoteYOffs = mfNoteYOffs+apInstanceVars.GetVarFloat("PopUpYOffset", 0.0f);
		
		mbCanBePickedUp = apInstanceVars.GetVarBool("CanBePickedUp", true);
		mbIsLockerItem = apInstanceVars.GetVarBool("IsLockerItem", false);
		mbIsPhoto = apInstanceVars.GetVarBool("IsPhoto", false);
		
		// Turn off any effects. This is to remove illumination which might have
		// been added in the .mat file. It's turned on again when the prop is
		// popped up to be read, and turned off when put back in-level.
		mBaseObj.SetEffectsActive(false,false);

		if (mBaseObj.GetBaseMaterial() !is null) 
		{
			if (mBaseObj.GetBaseMaterial().GetForceFullScaleTextures() == false)
			{
				//////
				// Readables should use materials that force fullscale textures
				Warning("Prop_Readable '"+mBaseObj.GetName()+"' with base material '"+mBaseObj.GetBaseMaterial().GetName()+"' doesn't force full scale textures");
			}
		}

		/////////////
		// Preload open file
		cLux_PreloadEntity(msOpenEntityFile);
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnUpdate(float afTimeStep)
	{
	}
	
	//------------------------------------------------------------
	
	void OnPostUpdate(float afTimeStep)
	{
	}
	
	//------------------------------------------------------------
	
	void ResetProperties()
	{
	}
	
	//------------------------------------------------------------
	
	void BeforeEntityDestruction()
	{
	}
		
	//------------------------------------------------------------
	
	void OnStartMove()
	{
	}
	
	//------------------------------------------------------------
	
	void OnConnectionStateChange(iLuxEntity@ apEntity,int alState)
	{
	}
	
	//------------------------------------------------------------
	
	/*bool OnUpdateAutoSleep()
	{
		return true;
	}*/
		
	//------------------------------------------------------------
	
	
	/////////////////////////////////////////
	// ACTIONS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnSetActive(bool abX)
	{
	
	}
	
	//------------------------------------------------------------
	
	void GiveDamage(iPhysicsBody@ apBodyHit, const cVector3f&in avOrigin, const cVector3f&in avHitPos, cLuxDamageProperties@ apDamageProps)
	{
		
	}
	
	//------------------------------------------------------------
	
	void OnHealthChange()
	{
	}
	//------------------------------------------------------------
	
	//NOTE: This is only useable if SetScriptCollisionCallbackActive is true
	void OnPhysicsCollision(iPhysicsBody @apBody, iPhysicsBody @apCollideBody, cPhysicsContactData&in apContactData)
	{
	
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	bool CanInteract(int alType, iPhysicsBody@ apBody)
	{		
		iCharacterBody@ pCharBody = cLux_GetPlayer().GetCharacterBody();

		bool bCanInteract = (cLux_GetPlayer().GetCurrentStateName() == "State_InteractiveCutsceneAnimation") ? true : pCharBody.IsOnGround();
		
		return bCanInteract;
	}
	
	//------------------------------------------------------------
		
	bool OnInteract(int alType, iPhysicsBody@ apBody, const cVector3f &in avFocusPos, const tString&in asData)
	{
		if(!mbCanBePickedUp)
			return false;
			
		Hint_StopHint();
		
		///////////////////////
		// Pickup readable and skip read state
		if (mbIsPhoto)
		{
			Sketchbook_AddPhotoByID(msReadableID);
			Hint_ShowHint_Hold("Hints", "HintPhotos", true, 1.5f, true, 15.f, true, true);
		}
		else
		{
			Sketchbook_AddNoteByID(msReadableID);
			Hint_ShowHint_Hold("Hints", "HintNotes", true, 1.5f, true, 15.f, true, true);
		}

		mbIsRead = true;
		GetBase().SetActive(false);
		
		//////////////////
		// Draw pickup gui
		iScrSketchbookUIHandler_Interface @pSketchbookHandler = cast<iScrSketchbookUIHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_SketchbookUIHandler) );
		if (pSketchbookHandler !is null)
		{
			if (mbIsPhoto == false)
				pSketchbookHandler.NotifyNewNote();
			else
				pSketchbookHandler.NotifyNewPhoto();
		}
			
		iScrItemHandler_Interface@ pItemHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
		tString sIcon = mbIsPhoto ? "inventory/photos/photo_icon.dds" : "inventory/items/inventory_item_note.dds";
		if (pItemHandler !is null)
			pItemHandler.StartPickUpGuiAnimation(sIcon, "");

		return false;
	}
	
	//------------------------------------------------------------
	
	int GetInteractIconId(int alType, iPhysicsBody@ apBody)
	{
		if(!mbCanBePickedUp)
			return eCrossHairState_PickUpForbidden;
			
		return eCrossHairState_PickUp;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GLOBAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnReadableOpened()
	{
		
	}
	
	//------------------------------------------------------------
	
	void OnReadableClosed()
	{
		
	}
	
	//------------------------------------------------------------
	
	// Callback from Readable state
	void _Global_OnItemRead()
	{
		mbIsRead = true;
		GetBase().SetActive(false);
	}
		
	//------------------------------------------------------------
	
	void _Global_SetCloseCallback()
	{
		msCloseCallback = cScript_GetGlobalArgString(0);
	}
	
	//------------------------------------------------------------
	
	void _Global_SetOpenEntityFile()
	{
		tString sNewEntityFile = cScript_GetGlobalArgString(0);
		if (msOpenEntityFile == sNewEntityFile)
			return;
		
		if (mpOpenEntity != null)
		{
			cLux_GetCurrentMap().DestroyEntity(mpOpenEntity);
			@mpOpenEntity = null;
		}
		
		msOpenEntityFile = sNewEntityFile;
	}
	
	//------------------------------------------------------------
	
	void _Global_GetCanBeHighlighted()
	{
		cScript_SetGlobalReturnBool(mbIsRead == false && mBaseObj.IsInteractedWith()==false && mbIsHudVersion==false);
	}
	
	//------------------------------------------------------------
	
	void _Global_GetIsPhoto()
	{
		cScript_SetGlobalReturnBool(mbIsPhoto);
	}
	
	//------------------------------------------------------------
	
	
	void _Global_SetIsHudVersion()
	{
		mbIsHudVersion = true;
	}
	
	//------------------------------------------------------------
	
	void _Global_SetEntries()
	{
		msTextCategory = cScript_GetGlobalArgString(0);
		msFrontTextEntry = cScript_GetGlobalArgString(1);
		msBackTextEntry = cScript_GetGlobalArgString(2);
		msTitleEntry = cScript_GetGlobalArgString(3);
	}

	//------------------------------------------------------------
	
	void _Global_SetCanBePickedUp()
	{
		mbCanBePickedUp = cScript_GetGlobalArgBool(0);
	}
	
	//------------------------------------------------------------
	
	void _Global_GetCanBePickedUp()
	{
		cScript_SetGlobalArgBool(0,mbCanBePickedUp);
	}
	
	//--------------------------------------------------------------
	
	void _Global_SetIsLockerItem()
	{
		mbIsLockerItem = cScript_GetGlobalArgBool(0);;
	}
	
	//--------------------------------------------------------------
	
	void _Global_SetId()
	{
		msReadableID = cScript_GetGlobalArgString(0);
	}
	
	//--------------------------------------------------------------
	
	void _Global_GetIsLockerItem()
	{
		cScript_SetGlobalReturnBool(mbIsLockerItem);
	}
		
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// DEBUG
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afStartY)
	{
		return afStartY;
	}
	
	//------------------------------------------------------------
	
	void OnRenderSolid(cRendererCallbackFunctions@ apFunctions)
	{		
/*		float fDist = (Player_GetFeetPosition() - mBaseObj.GetPosition()).Length();
		cColor col = cColor_White*1.6;
		if (fDist < 10)
			col = cColor(0, 0, 6+(54*(fDist/10)));
		apFunctions.GetLowLevelGfx().DrawLine(Player_GetFeetPosition()+cVector3f_Up*0.25, mBaseObj.GetPosition(), col);*/
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	tString msReadableID;
	[nosave] tString msTextCategory;
	[nosave] tString msFrontTextEntry;
	[nosave] tString msBackTextEntry;
	[nosave] tString msTitleEntry;
	[nosave] tString msVoiceSubject;
	[nosave] tString msLogIconFile;
	[nosave] float mfDistanceFromCamera;
	[nosave] float mfYStartOffset;
	[nosave] tString msOpenSound;
	[nosave] tString msCloseSound;
	[nosave] tString msPageTurnSound;
	[nosave] tString msCloseCallback;
	[nosave] tString msHighResMaterial;
	[nosave] float mfNoteScale;
	[nosave] float mfNoteYOffs;
	[nosave] float mfFOV;
	
	[nosave] iLuxEntity@ mpOpenEntity;
	
	bool mbIsRead=false;
	bool mbIsHudVersion=false;
	
	tString msOpenEntityFile;
	
	bool mbCanBePickedUp = true;
	bool mbIsLockerItem = false;
	bool mbIsPhoto = false;
	
	//------------------------------------------------------------
	
		
}	